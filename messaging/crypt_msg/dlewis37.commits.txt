42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  1) [package]
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  2) name = "crypt_msg"
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  3) version = "0.1.0"
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  4) edition = "2021"
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  5) authors = ["Dylan Lewis", "Alex Austin"]
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  6) 
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  7) [dependencies]
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  8) libp2p = {version = "0.49.0", features = ["gossipsub", 
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400  9)                                           "tcp", 
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 10)                                           "dns",  
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 11)                                           "websocket", 
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 12)                                           "async-std",
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 13)                                           "noise", 
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 14)                                           "mplex", 
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 15)                                           "yamux"]}
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 16) async-std = {version = "1.12.0", features = ["attributes"]}
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 17) futures = "0.3.25"
42aed65e (Dylan Lewis 2022-10-24 15:59:05 -0400 18) env_logger = "0.9.1"
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   1) use async_std::io;
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   2) use env_logger::{Builder, Env};
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   3) use futures::{prelude::*, select};
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   4) use libp2p::gossipsub::MessageId;
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   5) use libp2p::gossipsub::{
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   6)     GossipsubEvent, GossipsubMessage, IdentTopic as Topic, MessageAuthenticity, ValidationMode,
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   7) };
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   8) use libp2p::{gossipsub, identity, swarm::SwarmEvent, Multiaddr, PeerId};
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400   9) use std::collections::hash_map::DefaultHasher;
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  10) use std::error::Error;
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  11) use std::hash::{Hash, Hasher};
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  12) use std::time::Duration;
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  13) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  14) #[async_std::main]
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  15) async fn main() -> Result<(), Box<dyn Error>> {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  16)     Builder::from_env(Env::default().default_filter_or("info")).init();
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  17) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  18)     // Create a random PeerId
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  19)     let local_key = identity::Keypair::generate_ed25519();
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  20)     let local_peer_id = PeerId::from(local_key.public());
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  21)     println!("Local peer id: {:?}", local_peer_id);
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  22) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  23)     // Set up an encrypted TCP Transport over the Mplex and Yamux protocols
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  24)     let transport = libp2p::development_transport(local_key.clone()).await?;
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  25) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  26)     // Create a Gossipsub topic
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  27)     let topic = Topic::new("test-net");
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  28) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  29)     // Create a Swarm to manage peers and events
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  30)     let mut swarm = {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  31)         // To content-address message, we can take the hash of message and use it as an ID.
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  32)         let message_id_fn = |message: &GossipsubMessage| {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  33)             let mut s = DefaultHasher::new();
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  34)             message.data.hash(&mut s);
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  35)             MessageId::from(s.finish().to_string())
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  36)         };
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  37) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  38)         // Set a custom gossipsub
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  39)         let gossipsub_config = gossipsub::GossipsubConfigBuilder::default()
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  40)             // This is set to aid debugging by not cluttering the log space
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  41) 			.heartbeat_interval(Duration::from_secs(10))
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  42) 
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  43) 			// This sets the kind of message validation. The default is Strict (enforce message signing)
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  44) 			.validation_mode(ValidationMode::Strict)
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  45) 
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  46)             // content-address messages. No two messages of the same content will be propagated.
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  47) 			.message_id_fn(message_id_fn)
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  48)             .build()
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  49)             .expect("Valid config");
00000000 (Not Committed Yet 2022-10-25 23:20:19 -0400  50) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  51)         // build a gossipsub network behaviour
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  52)         let mut gossipsub: gossipsub::Gossipsub =
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  53)             gossipsub::Gossipsub::new(MessageAuthenticity::Signed(local_key), gossipsub_config)
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  54)                 .expect("Correct configuration");
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  55) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  56)         // subscribes to our topic
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  57)         gossipsub.subscribe(&topic).unwrap();
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  58) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  59)         // add an explicit peer if one was provided
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  60)         if let Some(explicit) = std::env::args().nth(2) {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  61)             match explicit.parse() {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  62)                 Ok(id) => gossipsub.add_explicit_peer(&id),
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  63)                 Err(err) => println!("Failed to parse explicit peer id: {:?}", err),
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  64)             }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  65)         }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  66) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  67)         // build the swarm
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  68)         libp2p::Swarm::new(transport, gossipsub, local_peer_id)
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  69)     };
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  70) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  71)     // Listen on all interfaces and whatever port the OS assigns
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  72)     swarm
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  73)         .listen_on("/ip4/0.0.0.0/tcp/0".parse().unwrap())
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  74)         .unwrap();
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  75) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  76)     // Reach out to another node if specified
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  77)     if let Some(to_dial) = std::env::args().nth(1) {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  78)         let address: Multiaddr = to_dial.parse().expect("User to provide valid address.");
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  79)         match swarm.dial(address.clone()) {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  80)             Ok(_) => println!("Dialed {:?}", address),
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  81)             Err(e) => println!("Dial {:?} failed: {:?}", address, e),
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  82)         };
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  83)     }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  84) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  85)     // Read full lines from stdin
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  86)     let mut stdin = io::BufReader::new(io::stdin()).lines().fuse();
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  87) 
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  88)     // Kick it off
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  89)     loop {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  90)         select! {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  91)             line = stdin.select_next_some() => {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  92)                 if let Err(e) = swarm
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  93)                     .behaviour_mut()
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  94)                     .publish(topic.clone(), line.expect("Stdin not to close").as_bytes())
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  95)                 {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  96)                     println!("Publish error: {:?}", e);
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  97)                 }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  98)             },
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400  99)             event = swarm.select_next_some() => match event {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 100)                 SwarmEvent::Behaviour(GossipsubEvent::Message {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 101)                     propagation_source: peer_id,
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 102)                     message_id: id,
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 103)                     message,
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 104)                 }) => println!(
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 105)                     "Got message: {} with id: {} from peer: {:?}",
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 106)                     String::from_utf8_lossy(&message.data),
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 107)                     id,
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 108)                     peer_id
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 109)                 ),
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 110)                 SwarmEvent::NewListenAddr { address, .. } => {
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 111)                     println!("Listening on {:?}", address);
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 112)                 }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 113)                 _ => {}
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 114)             }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 115)         }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 116)     }
42aed65e (Dylan Lewis       2022-10-24 15:59:05 -0400 117) }
